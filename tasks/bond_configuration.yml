---

- name: Check active bond interface state
  debug:
    msg: >
      Checking bond interface configuration for {{ item.device }}:
      {{ bond_check }}
  with_items: "{{ interfaces_bond_interfaces }}"
  changed_when: bond_check.diff
  register: bond_check_result
  notify:
    - Bounce network devices
  vars:
    bond_check: "{{ item | bond_check }}"

- name: Create the network configuration file for bond devices
  become: true
  template:
    src: 'bond_{{ ansible_facts.os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/{{ item | priority }}ifcfg-{{ item.device }}'
  with_items: '{{ interfaces_bond_interfaces }}'
  register: bond_result
  notify:
    - Check whether /etc/modules-load.d exists
    - Make sure the bonding module is loaded
    - Make sure the bonding module is loaded at boot via /etc/modules-load.d
    - Make sure the bonding module is loaded at boot via /etc/modules
    - Bounce network devices

- name: RedHat | Write configuration files for rhel route configuration
  become: true
  template:
    src: 'route_{{ ansible_facts.os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/route-{{ item.device }}'
  with_items: '{{ interfaces_bond_interfaces }}'
  when: item.route is defined and ansible_facts.os_family == 'RedHat'
  register: bond_route_add_result
  notify:
    - Bounce network devices

- name: RedHat | Remove configuration files for rhel route configuration
  become: true
  file:
    path: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/route-{{ item.device }}'
    state: absent
  with_items: '{{ interfaces_bond_interfaces }}'
  when: item.route is not defined and ansible_facts.os_family == 'RedHat'
  register: bond_route_del_result
  notify:
    - Bounce network devices

- name: RedHat | Write configuration files for rhel rule configuration
  become: true
  template:
    src: 'rule_{{ ansible_facts.os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/rule-{{ item.device }}'
  with_items: '{{ interfaces_bond_interfaces }}'
  when: item.rules is defined and ansible_facts.os_family == 'RedHat'
  register: bond_rule_add_result
  notify:
    - Bounce network devices

- name: RedHat | Remove configuration files for rhel rule configuration
  become: true
  file:
    path: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/rule-{{ item.device }}'
    state: absent
  with_items: '{{ interfaces_bond_interfaces }}'
  when: item.rules is not defined and ansible_facts.os_family == 'RedHat'
  register: bond_rule_del_result
  notify:
    - Bounce network devices

- name: Create the network configuration file for slave in the bond devices
  become: true
  template:
    src: 'bond_slave_{{ ansible_facts.os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/ifcfg-{{ item.1 }}'
  with_subelements:
    - "{{ interfaces_bond_interfaces }}"
    - bond_slaves
  when: interfaces_bond_setup_slaves
  register: bond_slave_result
  notify:
    - Bounce network devices

- name: Set a fact containing all bond master results
  set_fact:
    # Build a list of all bond master results.
    all_bond_master_results: >
      {{ bond_check_result.results | default([]) +
         bond_result.results | default([]) +
         bond_route_add_result.results | default([]) +
         bond_route_del_result.results | default([]) +
         bond_rule_add_result.results | default([]) +
         bond_rule_del_result.results | default([]) }}
    # Find bond interfaces which have all members changed. We do this by
    # excluding any bonds which have an unchanged member.
    bond_master_interfaces_with_all_slaves_changed: >
     {{ interfaces_bond_interfaces |
        map(attribute='device') |
        difference(bond_slave_result.results |
                   reject('changed') |
                   map(attribute='item.0.device') |
                   list) |
        list }}

# bond_master_interfaces_changed and bond_slave_interfaces_changed are used in
# the 'Bounce network devices' handler.
- name: Set facts containing changed bond master and slave devices
  set_fact:
    # Select those tasks which changed, and map to a list of the corresponding
    # bond master devices.
    # On CentOS/RHEL systems, if all members in a bond go down, the bond
    # interface will also go down. If the members are brought back up again,
    # the bond interface does not automatically come back up. Add bond
    # interfaces which have all members changed to the list.
    bond_master_interfaces_changed: >
      {{ (all_bond_master_results |
          select('changed') |
          map(attribute='item.device') |
          list +
          bond_master_interfaces_with_all_slaves_changed) |
         unique |
         list }}
    # Select those tasks which changed, and map to a list of the corresponding
    # bond slave devices.
    bond_slave_interfaces_changed: >
      {{ bond_slave_result.results |
         select('changed') |
         map(attribute='item.1') |
         unique |
         list }}
