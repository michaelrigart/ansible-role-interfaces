---
- name: RedHat | install current/latest network packages versions
  become: true
  package:
    name: '{{  interfaces_pkgs }}'
    state: '{{ interfaces_pkg_state }}'
  tags: package
  when: not interfaces_use_networkmanager

- name: RedHat | install NM-dispatcher-routing-rules
  become: true
  package:
    name: NetworkManager-dispatcher-routing-rules
    state: '{{ interfaces_pkg_state }}'
  tags: package
  when:
    - interfaces_use_networkmanager
    - not interfaces_use_nmconnection
    - interfaces_route_tables | length > 0
  notify: Restart NetworkManager

- name: RedHat | Add NetworkManager Custom Configuration
  copy:
    content: |
      # Ansible managed
      [connection]
      connection.autoconnect-slaves=1
    dest: /etc/NetworkManager/conf.d/80-rigart-interfaces.conf
  notify: Restart NetworkManager
  become: true

# CentOS 8/9 cloud images ship with ifcfg files for ens3 and eth0. ifcfg-ens3
# seems to be a relic from the image build process, and causes the network
# service to fail. ifcfg-eth0 is useful for most virtual machines, but if a
# cloud image is deployed on bare metal and eth0 is absent, the network service
# will fail. Remove these files if the interface does not exist or is not being
# configured.

- name: RedHat | network-scripts remove invalid interface configuration
  become: true
  file:
    path: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
    state: absent
  when:
    - item not in ansible_facts.interfaces
    - item not in interfaces_ether_interfaces | map(attribute='device') | list
    - item not in interfaces_bridge_interfaces | map(attribute='device') | list
    - item not in interfaces_bridge_interfaces | map(attribute='ports') | flatten | list
    - item not in interfaces_bond_interfaces | map(attribute='device') | list
    - item not in interfaces_bond_interfaces | map(attribute='bond_slaves') | flatten | list
  with_items: "{{ interfaces_workaround_centos_remove }}"

- name: RedHat | network-manager remove invalid interface configuration
  become: true
  file:
    path: "/etc/NetworkManager/system-connections/{{ item }}.nmconnection"
    state: absent
  when:
    - item not in ansible_facts.interfaces
    - item not in interfaces_ether_interfaces | map(attribute='device') | list
    - item not in interfaces_bridge_interfaces | map(attribute='device') | list
    - item not in interfaces_bridge_interfaces | map(attribute='ports') | flatten | list
    - item not in interfaces_bond_interfaces | map(attribute='device') | list
    - item not in interfaces_bond_interfaces | map(attribute='bond_slaves') | flatten | list
  with_items: "{{ interfaces_workaround_centos_remove }}"

# When using NetworkManager with system-connections store, existing ifcfg files
# need to be removed, otherwise they shadow our nmconnection files. We do this
# only for interfaces that we manage in this role.
- name: RedHat | remove network-scripts/ifcfg configuration for NM/system-connections
  become: true
  file:
    path: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
    state: absent
  when:
    - interfaces_use_nmconnection
  with_items:
    - "{{ interfaces_ether_interfaces | map(attribute='device') | list }}"
    - "{{ interfaces_bridge_interfaces | map(attribute='device') | list }}"
    - "{{ interfaces_bridge_interfaces | map(attribute='ports') | flatten | list }}"
    - "{{ interfaces_bond_interfaces | map(attribute='device') | list }}"
    - "{{ interfaces_bond_interfaces | map(attribute='bond_slaves') | flatten | list }}"

# When using the cloud-init network-manager renderer, an nmconnection file may
# have been created with the name cloud-init-{interface}.nmconnection. Delete
# it if we manage the same interface to avoid conflicts.
- name: RedHat | remove NM/system-connections generated by cloud-init
  become: true
  file:
    path: "/etc/NetworkManager/system-connections/cloud-init-{{ item }}.nmconnection"
    state: absent
  when:
    - interfaces_use_nmconnection
  with_items:
    - "{{ interfaces_ether_interfaces | map(attribute='device') | list }}"
    - "{{ interfaces_bridge_interfaces | map(attribute='device') | list }}"
    - "{{ interfaces_bridge_interfaces | map(attribute='ports') | flatten | list }}"
    - "{{ interfaces_bond_interfaces | map(attribute='device') | list }}"
    - "{{ interfaces_bond_interfaces | map(attribute='bond_slaves') | flatten | list }}"
