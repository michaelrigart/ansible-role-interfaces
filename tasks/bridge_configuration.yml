---
- name: Check active bridge interface state
  debug:
    msg: >
      Checking bridge interface configuration for {{ item.device }}:
      {{ bridge_check }}
  with_items: "{{ interfaces_bridge_interfaces }}"
  changed_when: bridge_check.diff
  register: bridge_check_result
  notify:
    - Bounce network devices
  vars:
    bridge_check: "{{ item | bridge_check }}"

- name: Create the network configuration file for bridge devices
  become: true
  template:
    src: 'bridge_{{ ansible_facts.os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/{{ item | priority }}ifcfg-{{ item.device }}'
  with_items: '{{ interfaces_bridge_interfaces }}'
  register: bridge_result
  notify:
    - Bounce network devices

- name: RedHat | Write configuration files for rhel route configuration
  become: true
  template:
    src: 'route_{{ ansible_facts.os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/route-{{ item.device }}'
  with_items: '{{ interfaces_bridge_interfaces }}'
  when: item.route is defined and ansible_facts.os_family == 'RedHat'
  register: bridge_route_add_result
  notify:
    - Bounce network devices

- name: RedHat | Remove configuration files for rhel route configuration
  become: true
  file:
    path: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/route-{{ item.device }}'
    state: absent
  with_items: '{{ interfaces_bridge_interfaces }}'
  when: item.route is not defined and ansible_facts.os_family == 'RedHat'
  register: bridge_route_del_result
  notify:
    - Bounce network devices

- name: RedHat | Write configuration files for rhel rule configuration
  become: true
  template:
    src: 'rule_{{ ansible_facts.os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/rule-{{ item.device }}'
  with_items: '{{ interfaces_bridge_interfaces }}'
  when: item.rules is defined and ansible_facts.os_family == 'RedHat'
  register: bridge_rule_add_result
  notify:
    - Bounce network devices

- name: RedHat | Remove configuration files for rhel rule configuration
  become: true
  file:
    path: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/rule-{{ item.device }}'
    state: absent
  with_items: '{{ interfaces_bridge_interfaces }}'
  when: item.rules is not defined and ansible_facts.os_family == 'RedHat'
  register: bridge_rule_del_result
  notify:
    - Bounce network devices

- name: Create the network configuration file for port on the bridge devices
  become: true
  template:
    src: 'bridge_port_{{ ansible_facts.os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_facts.os_family|lower] }}/ifcfg-{{ item.1 }}'
  with_subelements:
    - "{{ interfaces_bridge_interfaces }}"
    - ports
  # Don't configure bridge ports that are bonds here - they will have been
  # configured by the bond tasks.
  when: item.1 not in interfaces_bond_interfaces | map(attribute='device') | list
  register: bridge_port_result
  notify:
    - Bounce network devices

- name: Set a fact containing all bridge results
  set_fact:
    # Build a list of all bridge results.
    all_bridge_results: >
      {{ bridge_check_result.results | default([]) +
         bridge_result.results | default([]) +
         bridge_route_add_result.results | default([]) +
         bridge_route_del_result.results | default([]) +
         bridge_rule_add_result.results | default([]) +
         bridge_rule_del_result.results | default([]) }}
    # Find bridge interfaces which have all ports changed. We do this by
    # excluding any bridges which have an unchanged port.
    bridge_interfaces_with_all_ports_changed: >
     {{ interfaces_bridge_interfaces |
        map(attribute='device') |
        difference(bridge_port_result.results |
                   reject('changed') |
                   map(attribute='item.0.device') |
                   list) |
        list }}

# bridge_interfaces_changed and bridge_port_interfaces_changed are used in the
# 'Bounce network devices' handler.
- name: Set facts containing changed bridge and bridge port devices
  set_fact:
    # Select those tasks which changed, and map to a list of the corresponding
    # bridge devices.
    # On CentOS/RHEL 8 systems, if all ports of a bridge go down, the bridge
    # interface will also go down. If the ports are brought back up again,
    # the bridge interface does not automatically come back up. Add bridge
    # interfaces which have all ports changed to the list.
    bridge_interfaces_changed: >
      {{ (all_bridge_results |
          select('changed') |
          map(attribute='item.device') |
          list +
          bridge_interfaces_with_all_ports_changed) |
         unique |
         list }}
    # Select those tasks which changed, and map to a list of the corresponding
    # bridge port devices.
    bridge_port_interfaces_changed: >
      {{ bridge_port_result.results |
         select('changed') |
         map(attribute='item.1') |
         unique |
         list }}
