---

- name: Check active bridge interface state
  debug:
    msg: >
      Checking bridge interface configuration for {{ item.device }}:
      {{ bridge_check }}
  with_items: "{{ interfaces_bridge_interfaces }}"
  changed_when: bridge_check.diff
  register: bridge_check_result
  notify:
    - Bounce network devices
  vars:
    bridge_check: "{{ item | bridge_check }}"

- name: Create the network configuration file for bridge devices
  template:
    src: 'bridge_{{ ansible_os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_os_family|lower] }}/ifcfg-{{ item.device }}'
  with_items: '{{ interfaces_bridge_interfaces }}'
  register: bridge_result
  notify:
    - Bounce network devices

- name: RedHat | Write configuration files for rhel route configuration
  template:
    src: 'route_{{ ansible_os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_os_family|lower] }}/route-{{ item.device }}'
  with_items: '{{ interfaces_bridge_interfaces }}'
  when: item.route is defined and ansible_os_family == 'RedHat'
  register: bridge_route_add_result
  notify:
    - Bounce network devices

- name: RedHat | Remove configuration files for rhel route configuration
  file:
    path: '{{ interfaces_net_path[ansible_os_family|lower] }}/route-{{ item.device }}'
    state: absent
  with_items: '{{ interfaces_bridge_interfaces }}'
  when: item.route is not defined and ansible_os_family == 'RedHat'
  register: bridge_route_del_result
  notify:
    - Bounce network devices

- name: RedHat | Write configuration files for rhel rule configuration
  template:
    src: 'rule_{{ ansible_os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_os_family|lower] }}/rule-{{ item.device }}'
  with_items: '{{ interfaces_bridge_interfaces }}'
  when: item.rules is defined and ansible_os_family == 'RedHat'
  register: bridge_rule_add_result
  notify:
    - Bounce network devices

- name: RedHat | Remove configuration files for rhel rule configuration
  file:
    path: '{{ interfaces_net_path[ansible_os_family|lower] }}/rule-{{ item.device }}'
    state: absent
  with_items: '{{ interfaces_bridge_interfaces }}'
  when: item.rules is not defined and ansible_os_family == 'RedHat'
  register: bridge_rule_del_result
  notify:
    - Bounce network devices

- name: Create the network configuration file for port on the bridge devices
  template:
    src: 'bridge_port_{{ ansible_os_family }}.j2'
    dest: '{{ interfaces_net_path[ansible_os_family|lower] }}/ifcfg-{{ item.1 }}'
  with_subelements:
    - "{{ interfaces_bridge_interfaces }}"
    - ports
  # Don't configure bridge ports that are bonds here - they will have been
  # configured by the bond tasks.
  when: item.1 not in interfaces_bond_interfaces | map(attribute='device') | list
  register: bridge_port_result
  notify:
    - Bounce network devices

- name: Set a fact  containing all bridge results
  set_fact:
    # Build a list of all bridge results.
    all_bridge_results: >
      {{ bridge_check_result.results | default([]) +
         bridge_result.results | default([]) +
         bridge_route_add_result.results | default([]) +
         bridge_route_del_result.results | default([]) +
         bridge_rule_add_result.results | default([]) +
         bridge_rule_del_result.results | default([]) }}

# bridge_interfaces_changed and bridge_port_interfaces_changed are used in the
# 'Bounce network devices' handler.
- name: Set facts containing changed bridge and bridge port devices
  set_fact:
    # Select those tasks which changed, and map to a list of the corresponding
    # bridge devices.
    bridge_interfaces_changed: >
      {{ all_bridge_results |
         select('changed') |
         map(attribute='item.device') |
         unique |
         list }}
    # Select those tasks which changed, and map to a list of the corresponding
    # bridge port devices.
    bridge_port_interfaces_changed: >
      {{ bridge_port_result.results |
         select('changed') |
         map(attribute='item.1') |
         unique |
         list }}
